cmake_minimum_required(VERSION 3.8.0 FATAL_ERROR)
project(PnPTrainer)
include(ExternalProject)

set(CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake)

set(CMAKE_CXX_STANDARD 17)

include(CheckIncludeFiles)
include(CheckIncludeFileCXX)
set (CMAKE_REQUIRED_INCLUDES "/usr/include")
check_include_file_cxx(filesystem HAVE_STD_FILESYSTEM)
check_include_file_cxx(experimental/filesystem HAVE_STD_EXPERIMENTAL_FILESYSTEM)
check_include_file_cxx(source_location HAVE_STD_LOCATION)
check_include_file_cxx(experimental/source_location HAVE_STD_EXPERIMENTAL_LOCATION)
include(CheckSymbolExists)
check_symbol_exists(localtime_r "time.h" HAVE_LOCALTIME_R)
if(HAVE_LOCALTIME_R)
   message(STATUS "Using locatime_r")
else()
   message(STATUS "No locatime_r: Log dates could potentially be incorrect")
endif()

set(DEPENDENCIES "${PROJECT_SOURCE_DIR}/libs")
set(USE_INSTALLED_GLFW FALSE)
set(USE_INSTALLED_GLM TRUE)
set(USE_INSTALLED_FREETYPE_GL FALSE)
set(USE_GLAD FALSE)
set(USE_INSTALLED_OPENCV TRUE)
set(CUSTOM_OPENCV_DIR "/opt/opencv")
set(USE_INSTALLED_EIGEN TRUE)

find_package(Freetype REQUIRED) # Freetype required by FreeTypeGL in both cases

set(CMAKE_THREAD_PREFER_PTHREAD TRUE)
find_package( Threads REQUIRED )
MESSAGE(STATUS "Threads Lib: " ${CMAKE_THREAD_LIBS_INIT})
MESSAGE(STATUS "Using PTHreads?: "  ${CMAKE_USE_PTHREADS_INIT})

if (USE_INSTALLED_GLFW)
   find_package(glfw3 3.2 REQUIRED)
else()
   set(GLFW_LOCAL "${DEPENDENCIES}/glfw")
   set(GLFW_LOCAL_GIT "${GLFW_LOCAL}/.git")
   if (EXISTS ${GLFW_LOCAL} AND EXISTS ${GLFW_LOCAL_GIT})
      execute_process(COMMAND git pull
            WORKING_DIRECTORY ${GLFW_LOCAL})
   else()
      execute_process(COMMAND git clone https://github.com/glfw/glfw
            WORKING_DIRECTORY ${DEPENDENCIES})
   endif()
   set(GLFW_BUILD_DOCS OFF CACHE BOOL "" FORCE)
   set(GLFW_BUILD_TESTS OFF CACHE BOOL "" FORCE)
   set(GLFW_BUILD_EXAMPLES OFF CACHE BOOL "" FORCE)
   add_subdirectory(${GLFW_LOCAL})
   set(GLFW_INCLUDE_DIR "${GLFW_LOCAL}/include")
endif()

FIND_PACKAGE(OpenGL REQUIRED)
FIND_PACKAGE(GLUT REQUIRED)
MESSAGE(STATUS "OpenGL include directory: " "${OPENGL_INCLUDE_DIR}")
MESSAGE(STATUS "OpenGL library: " "${OPENGL_LIBRARY}")
MESSAGE(STATUS "GLUT include directory: " "${GLUT_INCLUDE_DIR}")
MESSAGE(STATUS "GLUT library: " "${GLU_LIBRARY}")

if(USE_GLAD)
   set(GLAD_DIR "${DEPENDENCIES}/glad")
   set(GLAD_C "${GLAD_DIR}/src/glad.c")
   if (EXISTS ${GLAD_DIR} AND EXISTS ${GLAD_C})
      add_library("glad" ${GLAD_C})
      target_include_directories("glad" PRIVATE "${GLAD_DIR}/include")
   else()
      message( FATAL_ERROR "GLAD requested but not found (expected in ${GLAD_DIR}). To fix add ${GLAD_C} and ${GLAD_DIR}/include/glad.h or use GLEW by setting USE_GLAD to false." )
   endif()
else()
   find_package(GLEW REQUIRED)
   MESSAGE(STATUS "glew Include:" ${GLEW_INCLUDE_DIRS})
   MESSAGE(STATUS "glew library:" ${GLEW_LIBRARIES})
endif()


if (USE_INSTALLED_FREETYPE_GL)
   find_package(FreeTypeGL REQUIRED)
else()
   set(FREETYPE_GL_LOCAL "${DEPENDENCIES}/freetype-gl")
   set(FREETYPE_GL_LOCAL_GIT "${FREETYPE_GL_LOCAL}/.git")
   set(FREETYPE_GL_LOCAL_BUILD "${FREETYPE_GL_LOCAL}/build")
   if (EXISTS ${FREETYPE_GL_LOCAL} AND EXISTS ${FREETYPE_GL_LOCAL_GIT})
      execute_process(COMMAND git pull
            WORKING_DIRECTORY ${FREETYPE_GL_LOCAL})
   else()
      execute_process(COMMAND git clone https://github.com/rougier/freetype-gl.git
            WORKING_DIRECTORY ${DEPENDENCIES})
   endif()
   set(freetype-gl_USE_VAO ON CACHE BOOL "" FORCE)
   set(freetype-gl_BUILD_DEMOS OFF CACHE BOOL "" FORCE)
   set(freetype-gl_BUILD_APIDOC OFF CACHE BOOL "" FORCE)
   set(freetype-gl_BUILD_TESTS OFF CACHE BOOL "" FORCE)
#   add_directory(${FREETYPE_GL_LOCAL})
   if (EXISTS ${FREETYPE_GL_LOCAL_BUILD})
      file(REMOVE_RECURSE ${FREETYPE_GL_LOCAL_BUILD})
   endif()
   file(MAKE_DIRECTORY ${FREETYPE_GL_LOCAL_BUILD})
   execute_process(COMMAND cmake -Dfreetype-gl_USE_VAO=ON -Dfreetype-gl_BUILD_DEMOS=OFF -Dfreetype-gl_BUILD_APIDOC=OFF -Dfreetype-gl_BUILD_TESTS=OFF -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE} ${FREETYPE_GL_LOCAL}
         WORKING_DIRECTORY ${FREETYPE_GL_LOCAL_BUILD})
   execute_process(COMMAND cmake --build ${FREETYPE_GL_LOCAL_BUILD} --clean-first
                   WORKING_DIRECTORY ${FREETYPE_GL_LOCAL})
   set(FREETYPEGL_INCLUDE_PATH "${DEPENDENCIES}")
   set(FREETYPEGL_LIBRARY "${FREETYPE_GL_LOCAL}/build/libfreetype-gl.a")
endif()

MESSAGE(STATUS "FreeType-GL Include:" ${FREETYPEGL_INCLUDE_PATH})
MESSAGE(STATUS "FreeType-GL library:" ${FREETYPEGL_LIBRARY})

if(USE_INSTALLED_GLM)
   find_package(GLM REQUIRED)
else()
   set(GLM_LOCAL "${DEPENDENCIES}/glm")
   set(GLM_LOCAL_GIT "${GLM_LOCAL}/.git")
   if (EXISTS ${GLM_LOCAL} AND EXISTS ${GLM_LOCAL_GIT})
      execute_process(COMMAND git pull
            WORKING_DIRECTORY ${GLM_LOCAL})
   else()
      execute_process(COMMAND git clone https://github.com/g-truc/glm
            WORKING_DIRECTORY ${DEPENDENCIES})
   endif()
   set(GLM_INCLUDE_DIRS "${GLM_LOCAL}")
endif()

MESSAGE(STATUS "GLM include: " "${GLM_INCLUDE_DIRS}")

set(CUDA_TOOLKIT_ROOT_DIR "/opt/cuda")
#set(OpenCV_STATIC ON)
if(USE_INSTALLED_OPENCV)
   find_package( OpenCV REQUIRED)
   if ("${OpenCV_INCLUDE_DIR}" STREQUAL "")
      set(OpenCV_INCLUDE_DIR "/usr/include/")
   endif()
else()
    set(OpenCV_FIND_QUIETLY false)
    set (OpenCV_DIR "${CUSTOM_OPENCV_DIR}")
    find_package( OpenCV REQUIRED
                  HINTS "${CMAKE_PREFIX_PATH}${CUSTOM_OPENCV_DIR}")
    if ("${OpenCV_INCLUDE_DIR}" STREQUAL "")
        set(OpenCV_INCLUDE_DIR "${CUSTOM_OPENCV_DIR}/include/")
    endif()
endif()

MESSAGE(STATUS "OpenCV Dir:" "${OpenCV_INSTALL_PATH}")
MESSAGE(STATUS "OpenCV Version:" "${OpenCV_VERSION_MAJOR}.${OpenCV_VERSION_MINOR}")
MESSAGE(STATUS "OpenCV include directory: " "${OpenCV_INCLUDE_DIR}")
MESSAGE(STATUS "OpenCV libs: " "${OpenCV_LIBS}")

if(USE_INSTALLED_EIGEN)
   find_package(Eigen3 REQUIRED)
   set(NANOGUI_EIGEN_INCLUDE_DIR "${EIGEN3_INCLUDE_DIR}")
else()
   set(EIGEN3_INCLUDE_DIR "${DEPENDENCIES}/nanogui/ext/eigen/Eigen/")
endif()

MESSAGE(STATUS "GLFW include directory: " "${GLFW_INCLUDE_DIR}")
MESSAGE(STATUS "GLFW library: " "${GLFW_LIBRARIES}")
MESSAGE(STATUS "Eigen 3 Include: " ${EIGEN3_INCLUDE_DIR})

if (HAVE_STD_EXPERIMENTAL_FILESYSTEM OR HAVE_STD_FILESYSTEM)
   FIND_PACKAGE(Boost REQUIRED COMPONENTS context fiber)
else()
   FIND_PACKAGE(Boost REQUIRED COMPONENTS context fiber filesystem)
endif()

MESSAGE(STATUS "Boost Version:" "${Boost_VERSION}")
MESSAGE(STATUS "Boost Include:" "${Boost_INCLUDE_DIRS}")

find_package(SOIL2)
if (SOIL2_FOUND)
   MESSAGE(STATUS "SOIL2: " "${SOIL2_INCLUDE_PATH} ${SOIL2_LIBRARY}")
else()
   set(SOIL2_INCLUDE_PATH "")
   set(SOIL2_LIBRARY "")
endif()

find_package(RapidJSON REQUIRED)
MESSAGE(STATUS "RapidJSON: " ${RAPID_JSON_INCLUDE_DIR})

set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTORCC ON)
set(CMAKE_AUTOUIC ON)
find_package(Qt5 COMPONENTS Core Widgets REQUIRED)

set(SOURCES src/main.cc src/main.hh src/flags.h src/OGLUtils.cc src/OGLUtils.h
            src/tinyply.cpp src/tinyply.h src/nanoflann.hpp src/ImageWindow.cc src/ImageWindow.hh
            src/OGLFiberWin.hh src/OGLFiberWin.cc src/PointCloudWin.h src/PointCloudWin.cc src/Status.h
            src/MatchWin.cc src/MatchWin.h src/OpenGLText.cc src/OpenGLText.h src/MatchIO.cc src/MatchIO.h
            src/CVQtScrollableImage.cc src/CVQtScrollableImage.h src/Axes.hh src/util.cc src/util.h
            src/types.h src/SourceLocation.hh src/json.h src/json.cc src/Status.cc)
set(INCLUDES "${PROJECT_SOURCE_DIR}/src" "${OpenCV_INCLUDE_DIR}" "${OPENGL_INCLUDE_DIR}"
              "${GLM_INCLUDE_DIRS}" "${Boost_INCLUDE_DIRS}" "${EIGEN3_INCLUDE_DIR}"
              "${FREETYPE_INCLUDE_DIRS}" "${FREETYPEGL_INCLUDE_PATH}" "${SOIL2_INCLUDE_PATH}" "${RAPID_JSON_INCLUDE_DIR}")
set(LIBS ${GLUT_LIBRARY} ${GLU_LIBRARY} ${GLEW_LIBRARIES} ${OPENGL_LIBRARY} Qt5::Widgets
         ${CMAKE_THREAD_LIBS_INIT} "${OpenCV_LIBS}" "${Boost_LIBRARIES}"
         "${FREETYPE_LIBRARIES}" "${FREETYPEGL_LIBRARY}" "${SOIL2_LIBRARY}" stdc++fs )

# "${GLAD_DIR}/include" "${GLFW_INCLUDE_DIR}"
add_executable(PnPtrainer ${SOURCES})

set(FLAGS "-DQT_NO_OPENGL")
list(APPEND FLAGS "-DGLM_ENABLE_EXPERIMENTAL")
if (HAVE_STD_FILESYSTEM)
   MESSAGE(STATUS "Using include/filesystem")
   list(APPEND FLAGS "-DSTD_FILESYSTEM")
elseif(HAVE_STD_EXPERIMENTAL_FILESYSTEM)
   list(APPEND FLAGS "-DFILESYSTEM_EXPERIMENTAL")
   MESSAGE(STATUS "Using include/experimental/filesystem")
else()
   MESSAGE(STATUS "Using boost/filesystem")
   list(APPEND FLAGS "-DFILESYSTEM_BOOST")
endif()
if (HAVE_STD_LOCATION)
   list(APPEND FLAGS "-DSTDLOCATION")
   MESSAGE(STATUS "Using include/source_location")
elseif(HAVE_STD_EXPERIMENTAL_LOCATION)
   list(APPEND FLAGS "-DLOCATION_EXPERIMENTAL")
   MESSAGE(STATUS "Using include/experimental/source_location")
else()
   list(APPEND FLAGS "-DLOCATION_NONE")
   MESSAGE(STATUS "No source_location - using macros")
endif()
if(USE_GLAD)
   list(APPEND FLAGS "-DUSE_GLAD")
else()
   list(APPEND FLAGS "-DUSE_GLEW")
endif()
if(HAVE_LOCALTIME_R)
   message(STATUS "Using locatime_r")
   list(APPEND FLAGS "-DHAVE_LOCALTIME_R")
else()
   message(STATUS "No locatime_r: Log dates could potentially be incorrect")
endif()
if (SOIL2_FOUND)
   list(APPEND FLAGS "-DHAVE_SOIL2")
endif()
MESSAGE(STATUS ${FLAGS})

target_compile_options( PnPtrainer PRIVATE ${FLAGS} )

if(USE_GLAD)
#   target_compile_options( PnPtrainer PRIVATE "-DFILESYSTEM_EXPERIMENTAL" "-DUSE_GLAD" "-DQT_NO_OPENGL")
   target_include_directories(PnPtrainer PUBLIC "${GLAD_DIR}/include" ${INCLUDES})
else()
#   target_compile_options( PnPtrainer PRIVATE "-DFILESYSTEM_EXPERIMENTAL" "-DUSE_GLEW" "-DQT_NO_OPENGL")
   target_include_directories(PnPtrainer PUBLIC "${GLFW_INCLUDE_DIR}" ${INCLUDES})
endif()
if (USE_INSTALLED_GLFW)
   if(USE_GLAD)
      target_link_libraries(PnPtrainer z glfw glad ${LIBS})
   else()
      target_link_libraries(PnPtrainer z glfw ${LIBS})
   endif()
else()
   if(USE_GLAD)
      target_link_libraries(PnPtrainer z glfw glad ${LIBS})
   else()
      target_link_libraries(PnPtrainer z glfw ${LIBS})
   endif()
endif()